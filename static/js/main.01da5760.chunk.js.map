{"version":3,"sources":["actions/weatherBoy.js","actions/index.js","components/WeatherBoy.js","config.js","reducers/weatherBoy.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["getForecastStarted","type","getForecastSuccess","data","payload","getForecastFailure","error","connect","state","forecastData","weatherBoy","isLoading","hasErrored","dispatch","getForecast","lat","lon","axios","get","then","res","catch","err","message","undefined","main","weather","temp","toString","name","desc","Grid","container","style","backgroundColor","height","direction","justify","alignItems","Card","CardContent","Typography","variant","color","gutterBottom","CardActions","Button","onClick","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","console","log","CircularProgress","size","initialState","errorData","combineReducers","action","middlware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","App","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01da5760.chunk.js","sourcesContent":["import {\n    GET_FORECAST_STARTED,\n    GET_FORECAST_SUCCESS,\n    GET_FORECAST_FAILURE,\n} from '.'\n\nimport { OPENWEATHER_APIKEY } from '../config'\n\nimport axios from 'axios'\n\nexport const getForecast = (lat, lon) => {\n    return dispatch => {\n        dispatch(getForecastStarted())\n        axios\n            .get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${OPENWEATHER_APIKEY}&units=metric`)\n            .then(res => {\n                dispatch(getForecastSuccess(res.data))\n            })\n            .catch(err => {\n                dispatch(getForecastFailure(err.message))\n            })\n    }\n}\n\nconst getForecastStarted = () => ({\n    type: GET_FORECAST_STARTED\n})\n\nconst getForecastSuccess = data => ({\n    type: GET_FORECAST_SUCCESS,\n    payload: data,\n})\n\nconst getForecastFailure = error => ({\n    type: GET_FORECAST_FAILURE,\n    payload: error,\n})","export const GET_FORECAST_STARTED = 'GET_FORECAST_STARTED'\nexport const GET_FORECAST_SUCCESS = 'GET_FORECAST_SUCCESS'\nexport const GET_FORECAST_FAILURE = 'GET_FORECAST_FAILURE'","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\n//Material-UI\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport { getForecast } from '../actions/weatherBoy'\n\nfunction WeatherBoy({ forecastData, isLoading, hasErrored, getForecast }) {\n\n    const handleClick = () => {\n        if (navigator.geolocation) {\n            try {\n                navigator.geolocation.getCurrentPosition(pos => {\n                    getForecast(pos.coords.latitude, pos.coords.longitude);\n                });\n            }\n            catch (err) {\n                console.log(err)\n            }\n        } else {\n            console.log('The browser doesn\\'t support geolocation.')\n        }\n    }\n\n    const data = {}\n    if (forecastData.main !== undefined && forecastData.weather !== undefined) {\n        data.temp = forecastData.main.temp.toString() + 'Â°C'\n        data.name = forecastData.name\n        data.desc = forecastData.weather[0].main\n    }\n\n    return <Grid container\n        style={{ backgroundColor: \"#212121\", height: \"100vh\" }}\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\">\n        <Card>\n            <CardContent>\n                <Typography variant=\"h4\" color=\"textPrimary\" gutterBottom>\n                    Hi! I'm WeatherBoy!\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n                    Location: {data.name}\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n                    Weather: {data.desc}\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\" gutterBottom>\n                    Temperature: {data.temp}\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Button variant=\"contained\" color=\"secondary\" onClick={handleClick}>Geolocate Weather</Button>\n                {isLoading && <CircularProgress color=\"secondary\" size=\"2rem\" />}\n                {hasErrored && <p>Error getting data.</p>}\n            </CardActions>\n        </Card>\n    </Grid>\n}\n\nWeatherBoy.propTypes = {\n    forecastData: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool.isRequired,\n    hasErrored: PropTypes.bool.isRequired,\n    getForecast: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    forecastData: state.weatherBoy.forecastData,\n    isLoading: state.weatherBoy.isLoading,\n    hasErrored: state.weatherBoy.hasErrored,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    getForecast: (lat, lon) => dispatch(getForecast(lat, lon)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherBoy)","export const BASE_IP = 'localhost:3000' //\nexport const OPENWEATHER_APIKEY = '81d97c93f210d17610aeeaeb8f81af5e' // API key for https://openweathermap.org","import { GET_FORECAST_STARTED, GET_FORECAST_SUCCESS, GET_FORECAST_FAILURE } from '../actions'\n\nconst initialState = {\n    forecastData: {},\n    isLoading: false,\n    hasErrored: false,\n    errorData: '',\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_FORECAST_STARTED:\n            return {\n                ...state,\n                isLoading: true,\n                hasErrored: false,\n            }\n        case GET_FORECAST_SUCCESS:\n            return {\n                ...state,\n                forecastData: action.payload,\n                isLoading: false,\n            }\n        case GET_FORECAST_FAILURE:\n            return {\n                ...state,\n                hasErrored: true,\n                errorData: action.payload,\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport weatherBoy from './weatherBoy'\n\nexport default combineReducers({\n    weatherBoy,\n})","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst initialState = {}\n\nconst middlware = [thunk]\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, initialState, composeEnhancers(\n    applyMiddleware(...middlware),\n))\n\nexport default store","import React from 'react'\nimport WeatherBoy from './components/WeatherBoy'\n\n//Material-UI\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nfunction App() {\n  return <Provider store={store}>\n    <CssBaseline />\n    <WeatherBoy />\n  </Provider>\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}